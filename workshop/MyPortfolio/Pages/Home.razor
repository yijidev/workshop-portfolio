@page "/"
@using System.Net.Http.Json
@using MyPortfolio.Components
@using MyPortfolio.Models
@inject HttpClient Http

<PageTitle>My Portfolio</PageTitle>

<style>
  #header {
    position: fixed;
    display: flex;
    justify-content: center;
    gap: 2rem;
    background: rgba(255,255,255,0.75);
    padding: 1rem;
    top: 0;
    width: 100%;
    z-index: 10;
  }

    #contact {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2.5rem;
    padding: 5rem 0 3rem;
    width: 100vw;
    
  }
</style>

<div id="header">
    <a href="#home" target="_top">Home</a>
    <a href="#about" target="_top">About</a>
    <a href="#portfolio" target="_top">Portfolio</a>
    <a href="#contact" target="_top">Contact</a>
</div>

<div id="contact" style="background-color: #4E567E;">
    @if (property is null)
    {
        <div style="display: flex; justify-content: center; gap: 2.5rem;">
            <p><em>Loading...</em></p>
        </div>
    }
    else if (icons is not null)
    {
        <div style="display: flex; justify-content: center; gap: 2.5rem;">
            @if (string.IsNullOrWhiteSpace(property.Email) is false)
            {
                <a href="mailto:@(property.Email)">
                    <img src="@icons.Email" alt="email" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.LinkedIn) is false)
            {
                <a href="https://linkedin.com/in/@(property.LinkedIn)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.LinkedIn" alt="LinkedIn" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.GitHub) is false)
            {
                <a href="https://github.com/@(property.GitHub)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.GitHub" alt="GitHub" class="social-icon" />
                </a>
            }
        </div>
        <p class="small" style="margin-top: 0; color: white;">Created by @property.Name</p>
    }
</div>

@code {
    private SiteProperties? property;
    private HeroImage? heroHome;

    private AboutMe? aboutMe;
    private HeroImage? heroAboutMe;

    private List<Project>? projects;
    private HeroImage? heroPortfolio;

    private SocialIcons? icons;
    
    protected override async Task OnInitializedAsync()
    {
        property = await Http.GetFromJsonAsync<SiteProperties>("sample-data/siteproperties.json");

        var heros = await Http.GetFromJsonAsync<List<HeroImage>>("sample-data/heroimages.json");
        heroHome = heros.SingleOrDefault(h => h.Name == "home");

        aboutMe = await Http.GetFromJsonAsync<AboutMe>("sample-data/aboutme.json");
        heroAboutMe = heros.SingleOrDefault(h => h.Name == "about");

        projects = await Http.GetFromJsonAsync<List<Project>>("sample-data/projects.json");
        heroPortfolio = heros.SingleOrDefault(h => h.Name == "portfolio");

        icons = await Http.GetFromJsonAsync<SocialIcons>("sample-data/socialicons.json");
    }
}